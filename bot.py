import gspread
import os
from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from datetime import datetime

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets –ø–æ —Å—Å—ã–ª–∫–µ
def connect_to_google_sheets():
    import json
    google_credentials_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
    creds = Credentials.from_service_account_info(json.loads(google_credentials_json), scopes=['https://www.googleapis.com/auth/spreadsheets'])

    client = gspread.authorize(creds)

    # –û—Ç–∫—Ä—ã—Ç–∏–µ Google Sheets –ø–æ —Å—Å—ã–ª–∫–µ
    sheet = client.open_by_url(os.getenv('SHEETS_URL')).sheet1
    return sheet

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
def check_headers(sheet):
    headers = sheet.row_values(1)
    required_headers = ['–î–∞—Ç–∞', '–Ω–∏–∫–Ω–µ–π–º –≤ Telegram', '–ò–º—è', '–ù–∞–∫–æ–ø–ª–µ–Ω–æ', '–¶–µ–ª—å']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞–∂–¥–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    for header in required_headers:
        if header not in headers:
            raise KeyError(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ '{header}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
def user_exists_in_sheet(sheet, username):
    records = sheet.get_all_records()
    print(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤ —Ç–∞–±–ª–∏—Ü–µ...")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for record in records:
        if '–Ω–∏–∫–Ω–µ–π–º –≤ Telegram' in record:
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏: {record['–Ω–∏–∫–Ω–µ–π–º –≤ Telegram']}")  # –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
            if record['–Ω–∏–∫–Ω–µ–π–º –≤ Telegram'] == username:  # –ò—â–µ–º –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!")  # –û—Ç–ª–∞–¥–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
                return True
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")  # –û—Ç–ª–∞–¥–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    return False

# –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_row(sheet, username):
    records = sheet.get_all_records()
    print(f"–ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}...")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for index, record in enumerate(records):
        if '–Ω–∏–∫–Ω–µ–π–º –≤ Telegram' in record:
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏: {record['–Ω–∏–∫–Ω–µ–π–º –≤ Telegram']}")  # –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
            if record['–Ω–∏–∫–Ω–µ–π–º –≤ Telegram'] == username:  # –ò—â–µ–º –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @
                print(f"–°—Ç—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–∞: {index + 2}")  # –û—Ç–ª–∞–¥–∫–∞, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
                return index + 2  # +2, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    print("–°—Ç—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")  # –û—Ç–ª–∞–¥–∫–∞, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
async def check_goal_achieved(update: Update, context, username, current_amount, goal):
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–∏ –¥–ª—è {username}: —Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞ {current_amount}, —Ü–µ–ª—å {goal}")  # –û—Ç–ª–∞–¥–∫–∞
    if current_amount >= goal:
        message = f"üéâ @{username}, –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π —Ü–µ–ª–∏! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üèÜ"
        image_url = "https://mec-krasnodar.ru/media/k2/items/cache/9dd60418066db724ebb1cf832eaf5702_L.jpg"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—á—É—é —Å—Å—ã–ª–∫—É
        await update.message.reply_photo(photo=image_url, caption=message)
        print(f"–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –¥–ª—è {username}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")  # –û—Ç–ª–∞–¥–∫–∞
    else:
        print(f"–¶–µ–ª—å –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –¥–ª—è {username}.")  # –û—Ç–ª–∞–¥–∫–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö—ç—à—Ç–µ–≥–æ–º #ninja_race (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã)
async def handle_message(update: Update, context):
    message = update.message
    username = message.from_user.username
    
    if "#ninja_race" in message.text:
        try:
            amount = int(message.text.split()[-1])
            sheet = connect_to_google_sheets()

            if user_exists_in_sheet(sheet, username):
                user_row = get_user_row(sheet, username)
                if user_row:
                    current_amount = int(sheet.cell(user_row, 4).value)
                    goal = int(sheet.cell(user_row, 5).value)
                    new_amount = current_amount + amount
                    sheet.update_cell(user_row, 4, new_amount)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É
                    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è {username}: —Å—Ç–∞—Ä–∞—è —Å—É–º–º–∞ {current_amount}, –Ω–æ–≤–∞—è —Å—É–º–º–∞ {new_amount}, —Ü–µ–ª—å {goal}")  # –û—Ç–ª–∞–¥–∫–∞

                    await check_goal_achieved(update, context, username, new_amount, goal)
                    await update.message.reply_text(f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_amount} —Ä—É–±–ª–µ–π</b>", parse_mode='HTML')
            else:
                await update.message.reply_text(f"‚ö†Ô∏è @{username}, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /nr_go <–ò–º—è> <–¶–µ–ª—å> —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª –≤–µ—Å—Ç–∏ —É—á–µ—Ç.")
        except ValueError:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–æ—Å–ª–µ —Ö–µ—à—Ç–µ–≥–∞ #ninja_race.")
            print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")  # –û—Ç–ª–∞–¥–∫–∞

# –ö–æ–º–∞–Ω–¥–∞ #nr_go (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è)
async def nr_go(update: Update, context):
    try:
        name = context.args[0]
        goal = int(context.args[1])

        sheet = connect_to_google_sheets()
        user_data = [update.message.date.strftime("%Y-%m-%d"), update.message.from_user.username, name, 0, goal]
        sheet.append_row(user_data)

        await update.message.reply_text(f"üéØ –¶–µ–ª—å <b>{goal} —Ä—É–±–ª–µ–π</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {name}. –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É!", parse_mode='HTML')
    except IndexError:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /nr_go <–ò–º—è> <–¶–µ–ª—å>.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö—ç—à—Ç–µ–≥–æ–º #ninja_race (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã)
async def handle_message(update: Update, context):
    message = update.message
    username = message.from_user.username
    
    if "#ninja_race" in message.text:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É
            amount = int(message.text.split()[-1])
            sheet = connect_to_google_sheets()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ
            if user_exists_in_sheet(sheet, username):
                user_row = get_user_row(sheet, username)
                if user_row:
                    current_amount = int(sheet.cell(user_row, 4).value)
                    goal = int(sheet.cell(user_row, 5).value)
                    new_amount = current_amount + amount
                    sheet.update_cell(user_row, 4, new_amount)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É
                    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è {username}: —Å—Ç–∞—Ä–∞—è —Å—É–º–º–∞ {current_amount}, –Ω–æ–≤–∞—è —Å—É–º–º–∞ {new_amount}, —Ü–µ–ª—å {goal}")  # –û—Ç–ª–∞–¥–∫–∞

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ü–µ–ª–∏
                    await check_goal_achieved(update, context, username, new_amount, goal)

                    await update.message.reply_text(f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_amount} —Ä—É–±–ª–µ–π.")
            else:
                await update.message.reply_text(f"@{username}, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /nr_go <–ò–º—è> <–¶–µ–ª—å> —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª –≤–µ—Å—Ç–∏ —É—á–µ—Ç.")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–æ—Å–ª–µ —Ö–µ—à—Ç–µ–≥–∞ #ninja_race.")
            print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")  # –û—Ç–ª–∞–¥–∫–∞

# –ö–æ–º–∞–Ω–¥–∞ /nr_stats (–≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
async def nr_stats(update: Update, context):
    sheet = connect_to_google_sheets()
    username = update.message.from_user.username
    user_row = get_user_row(sheet, username)

    if user_row:
        date_start = sheet.cell(user_row, 1).value
        amount = int(sheet.cell(user_row, 4).value)
        goal = int(sheet.cell(user_row, 5).value)
        days_elapsed = (datetime.now() - datetime.strptime(date_start, "%Y-%m-%d")).days
        remaining = goal - amount

        await update.message.reply_text(
            f"üìä @{username}\n\n<b>–ù–∞–∫–æ–ø–ª–µ–Ω–æ:</b> {amount} —Ä—É–±–ª–µ–π\n<b>–ü—Ä–æ—à–ª–æ –¥–Ω–µ–π:</b> {days_elapsed}\n<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {remaining} —Ä—É–±–ª–µ–π", 
            parse_mode='HTML'
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /nr_go <–ò–º—è> <–¶–µ–ª—å> —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª –≤–µ—Å—Ç–∏ —É—á–µ—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ /nr_clear (–æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
async def nr_clear(update: Update, context):
    try:
        sheet = connect_to_google_sheets()
        check_headers(sheet)
        username = update.message.from_user.username

        user_row = get_user_row(sheet, username)
        if user_row:
            sheet.delete_rows(user_row)
            await update.message.reply_text("üóëÔ∏è –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    except KeyError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /nr_help (–ø–æ–º–æ—â—å)
async def nr_help(update: Update, context):
    help_text = """
    <b>üí° –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>
    /nr_go <–ò–º—è> <–¶–µ–ª—å> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è.
    /nr_stats ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è—Ö.
    /nr_clear ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.
    /nr_help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await update.message.reply_text(help_text, parse_mode='HTML')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(os.getenv('BOT_TOKEN')).build()

    app.add_handler(CommandHandler('nr_go', nr_go))
    app.add_handler(CommandHandler('nr_stats', nr_stats))
    app.add_handler(CommandHandler('nr_clear', nr_clear))
    app.add_handler(CommandHandler('nr_help', nr_help))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(CallbackQueryHandler(button))

    app.run_polling()

# –ü—Ä–∏–º–µ—Ä –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
async def show_menu(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='clear')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context):
    query = update.callback_query
    if query.data == 'stats':
        await nr_stats(query, context)
    elif query.data == 'clear':
        await nr_clear(query, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context):
    query = update.callback_query
    user = query.from_user
    if query.data == 'track':
        await query.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /nr_go <–ò–º—è> <–¶–µ–ª—å> —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª –≤–µ—Å—Ç–∏ —É—á–µ—Ç!")
    elif query.data == 'ignore':
        await query.message.reply_text("–•–æ—Ä–æ—à–æ. –ï—Å–ª–∏ —è –≤–Ω–æ–≤—å –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ /nr_help.")

if __name__ == '__main__':
    main()

    